// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: bot.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BotService_JoinMeeting_FullMethodName       = "/BotService/JoinMeeting"
	BotService_GetMeetingDetails_FullMethodName = "/BotService/GetMeetingDetails"
	BotService_LeaveMeeting_FullMethodName      = "/BotService/LeaveMeeting"
)

// BotServiceClient is the client API for BotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotServiceClient interface {
	JoinMeeting(ctx context.Context, in *JoinMeetingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinMeetingResponse], error)
	GetMeetingDetails(ctx context.Context, in *MeetingDetailsRequest, opts ...grpc.CallOption) (*MeetingDetailsResponse, error)
	LeaveMeeting(ctx context.Context, in *LeaveMeetingRequest, opts ...grpc.CallOption) (*LeaveMeetingResponse, error)
}

type botServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotServiceClient(cc grpc.ClientConnInterface) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) JoinMeeting(ctx context.Context, in *JoinMeetingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinMeetingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BotService_ServiceDesc.Streams[0], BotService_JoinMeeting_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinMeetingRequest, JoinMeetingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BotService_JoinMeetingClient = grpc.ServerStreamingClient[JoinMeetingResponse]

func (c *botServiceClient) GetMeetingDetails(ctx context.Context, in *MeetingDetailsRequest, opts ...grpc.CallOption) (*MeetingDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingDetailsResponse)
	err := c.cc.Invoke(ctx, BotService_GetMeetingDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) LeaveMeeting(ctx context.Context, in *LeaveMeetingRequest, opts ...grpc.CallOption) (*LeaveMeetingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveMeetingResponse)
	err := c.cc.Invoke(ctx, BotService_LeaveMeeting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServiceServer is the server API for BotService service.
// All implementations must embed UnimplementedBotServiceServer
// for forward compatibility.
type BotServiceServer interface {
	JoinMeeting(*JoinMeetingRequest, grpc.ServerStreamingServer[JoinMeetingResponse]) error
	GetMeetingDetails(context.Context, *MeetingDetailsRequest) (*MeetingDetailsResponse, error)
	LeaveMeeting(context.Context, *LeaveMeetingRequest) (*LeaveMeetingResponse, error)
	mustEmbedUnimplementedBotServiceServer()
}

// UnimplementedBotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBotServiceServer struct{}

func (UnimplementedBotServiceServer) JoinMeeting(*JoinMeetingRequest, grpc.ServerStreamingServer[JoinMeetingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method JoinMeeting not implemented")
}
func (UnimplementedBotServiceServer) GetMeetingDetails(context.Context, *MeetingDetailsRequest) (*MeetingDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingDetails not implemented")
}
func (UnimplementedBotServiceServer) LeaveMeeting(context.Context, *LeaveMeetingRequest) (*LeaveMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMeeting not implemented")
}
func (UnimplementedBotServiceServer) mustEmbedUnimplementedBotServiceServer() {}
func (UnimplementedBotServiceServer) testEmbeddedByValue()                    {}

// UnsafeBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServiceServer will
// result in compilation errors.
type UnsafeBotServiceServer interface {
	mustEmbedUnimplementedBotServiceServer()
}

func RegisterBotServiceServer(s grpc.ServiceRegistrar, srv BotServiceServer) {
	// If the following call pancis, it indicates UnimplementedBotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BotService_ServiceDesc, srv)
}

func _BotService_JoinMeeting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinMeetingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BotServiceServer).JoinMeeting(m, &grpc.GenericServerStream[JoinMeetingRequest, JoinMeetingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BotService_JoinMeetingServer = grpc.ServerStreamingServer[JoinMeetingResponse]

func _BotService_GetMeetingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetMeetingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_GetMeetingDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetMeetingDetails(ctx, req.(*MeetingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_LeaveMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).LeaveMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotService_LeaveMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).LeaveMeeting(ctx, req.(*LeaveMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotService_ServiceDesc is the grpc.ServiceDesc for BotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeetingDetails",
			Handler:    _BotService_GetMeetingDetails_Handler,
		},
		{
			MethodName: "LeaveMeeting",
			Handler:    _BotService_LeaveMeeting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinMeeting",
			Handler:       _BotService_JoinMeeting_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bot.proto",
}
